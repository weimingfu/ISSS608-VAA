---
title: "Hands-on Exercise 4c"
date: "January 25, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
editor: visual
---

# **Visualising Uncertainty**

## 1 **Learning Outcome**

Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:

-   to plot statistics error bars by using ggplot2,
-   to plot interactive error bars by combining ggplot2, plotly and DT,
-   to create advanced by using ggdist, and
-   to create hypothetical outcome plots (HOPs) by using ungeviz package.

## 2 **Getting Started**

### 2.1 **Installing and loading the packages**

For the purpose of this exercise, the following R packages will be used, they are:

-   tidyverse, a family of R packages for data science process,
-   plotly for creating interactive plot,
-   gganimate for creating animation plot,
-   DT for displaying interactive html table,
-   crosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and
-   ggdist for visualising distribution and uncertainty.

```{r}
#| eval: false
devtools::install_github("wilkelab/ungeviz")
```

```{r}
pacman::p_load(ungeviz, plotly, crosstalk,
               DT, ggdist, ggridges,
               colorspace, gganimate, tidyverse)
```

### 2.2 **Data import**

For the purpose of this exercise, *Exam_data.csv* will be used.

```{r}
exam <- read_csv("data/Exam_Data.csv")
```

## 3 **Visualizing the uncertainty of point estimates: ggplot2 methods**

A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.

::: callout-important
#### Important

-   Don’t confuse the uncertainty of a point estimate with the variation in the sample
:::

In this section, you will learn how to plot error bars of maths scores by race by using data provided in *exam* tibble data frame.

Firstly, code chunk below will be used to derive the necessary summary statistics.

```{r}
my_sum <- exam %>% 
  group_by(RACE) %>% 
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
  ) %>% 
  mutate(se=sd/sqrt(n-1))
```

::: callout-tip
#### Things to learn from the code chunk above

-   `group_by()` of **dplyr** package is used to group the observation by RACE,
-   `summarise()` is used to compute the count of observations, mean, standard deviation
-   `mutate()` is used to derive standard error of Maths by RACE, and
-   the output is save as a tibble data table called *my_sum*.
:::

::: callout-note
#### Note

For the mathematical explanation, please refer to Slide 20 of Lesson 4.
:::

Next, the code chunk below will be used to display *my_sum* tibble data frame in an html table format.

::: panel-tabset
#### The code chunk

```{r}
#| eval: false
knitr::kable(head(my_sum), format='html')
```

#### The table

```{r}
#| echo: false
knitr::kable(head(my_sum), format='html')
```
:::

### 3.1 **Plotting standard error bars of point estimates**

Now we are ready to plot the standard error bars of mean maths score by race as shown below.

::: panel-tabset
#### The plot

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(aes(x=RACE,
                    ymin=mean-se,
                    ymax=mean+se),
                width=0.2,
                color="black",
                alpha=0.9,
                size=0.5) +
  geom_point(aes(x=RACE,
                 y=mean),
             stat="identity",
             color="red",
             size=1.5,
             alpha=1) +
  ggtitle("Standard error of mean maths score by race")
```

#### The code chunk

```{r}
#| eval: false
ggplot(my_sum) +
  geom_errorbar(aes(x=RACE,
                    ymin=mean-se,
                    ymax=mean+se),
                width=0.2,
                color="black",
                alpha=0.9,
                size=0.5) +
  geom_point(aes(x=RACE,
                 y=mean),
             stat="identity",
             color="red",
             size=1.5,
             alpha=1) +
  ggtitle("Standard error of mean maths score by race")
```
:::

### 3.2 **Plotting confidence interval of point estimates**

Instead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.

::: panel-tabset
#### The plot

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(aes(x=reorder(RACE, -mean),
                    ymin=mean-1.96*se,
                    ymax=mean+1.96*se),
                width=0.2,
                colour="black",
                alpha=0.9,
                size=0.5) +
  geom_point(aes(x=RACE,
                 y=mean),
             stat="identity",
             color="red",
             size=1.5,
             alpha=1) +
  labs(x="Maths score",
       title="95% confidence interval of mean maths score by race")
```

#### The code chunk

```{r}
#| eval: false
ggplot(my_sum) +
  geom_errorbar(aes(x=reorder(RACE, -mean),
                    ymin=mean-1.96*se,
                    ymax=mean+1.96*se),
                width=0.2,
                colour="black",
                alpha=0.9,
                size=0.5) +
  geom_point(aes(x=RACE,
                 y=mean),
             stat="identity",
             color="red",
             size=1.5,
             alpha=1) +
  labs(x="Maths score",
       title="95% confidence interval of mean maths score by race")
```
:::

### 3.3 **Visualizing the uncertainty of point estimates with interactive error bars**

In this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.

::: {.panel-tabset style="color: white"}
#### The plot

```{r}
#| echo: false
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(x=reorder(RACE, -mean),
                                     ymin=mean-2.58*se,
                                     ymax=mean+2.58*se),
                                 width=0.2,
                                 colour="black",
                                 alpha=0.9,
                                 size=0.5) + 
                   geom_point(aes(x=RACE,
                                  y=mean,
                                  text=paste("Race:",
                                             `RACE`,
                                             "<br>N:",
                                             `n`,
                                             "<br>Avg. Scores:",
                                             round (mean, digits=2),
                                             "<br>95% CI:[",
                                             round((mean-2.58*se), digits=2), ",",
                                             round((mean+2.58*se), digits=2), "]")),
                              stat = "identity",
                              color="red",
                              size=1.5,
                              alpha=1) +
                   xlab("Race") +
                   ylab("Average Scores") +
                   theme_minimal() +
                   theme(axis.text.x = element_text(angle = 45, vjust=0.5, hjust=1)) +
                   ggtitle("99% confidence interval of average /<br>maths scores by race")),
                tooltip="text"),
       DT::datatable(shared_df,
                     rownames=F,
                     class="compact",
                     width="100%",
                     options=list(pageLength=10,
                                  scrollX=T),
                     colnames=c("No. of pupils",
                                "Avg Scores",
                                "Std Dev",
                                "Std Error")) %>% 
         formatRound(columns=c("mean", "sd", "se"),
                     digits=2))
```

#### The code chunk

```{r}
#| eval: false
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(x=reorder(RACE, -mean),
                                     ymin=mean-2.58*se,
                                     ymax=mean+2.58*se),
                                 width=0.2,
                                 colour="black",
                                 alpha=0.9,
                                 size=0.5) + 
                   geom_point(aes(x=RACE,
                                  y=mean,
                                  text=paste("Race:",
                                             `RACE`,
                                             "<br>N:",
                                             `n`,
                                             "<br>Avg. Scores:",
                                             round (mean, digits=2),
                                             "<br>95% CI:[",
                                             round((mean-2.58*se), digits=2), ",",
                                             round((mean+2.58*se), digits=2), "]")),
                              stat = "identity",
                              color="red",
                              size=1.5,
                              alpha=1) +
                   xlab("Race") +
                   ylab("Average Scores") +
                   theme_minimal() +
                   theme(axis.text.x = element_text(angle = 45, vjust=0.5, hjust=1)) +
                   ggtitle("99% confidence \ninterval of average \n/<br>maths scores by race")),
                tooltip="text"),
       DT::datatable(shared_df,
                     rownames=F,
                     class="compact",
                     style = "bulma",
                     width="100%",
                     options=list(pageLength=10,
                                  scrollX=T),
                     colnames=c("No. of pupils",
                                "Avg Scores",
                                "Std Dev",
                                "Std Error")) %>%
         formatStyle("RACE", color = "red", backgroundColor = "white") %>% 
         formatRound(columns=c("mean", "sd", "se"),
                     digits=2))
```
:::
